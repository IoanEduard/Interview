namespace _LeetCode_Easy.Interfaces
{
    /// <summary>
    /// Can't get more basic than this
    /// No testCases documented 
    /// </summary>
    public interface IEasy
    {
        int AddDigits(int num);
        int AlternateDigitSum(int n);
        bool AreNumbersAscending(string s);
        bool AreOccurrencesEqual(string s);
        int ArithmeticTriplets(int[] nums, int diff);
        int ArrayPairSum(int[] nums);
        bool ArrayStringsAreEqual(string[] word1, string[] word2);
        bool ArrayStringsAreEqualStack(string[] word1, string[] word2);
        int BalancedStringSplit(string s);
        int[] BuildArray(int[] nums);
        bool CanBeIncreasing(int[] nums);
        bool CanConstruct(string ransomNote, string magazine);
        string CapitalizeTitle(string title);
        bool CheckIfPangram(string sentence);
        bool CheckPerfectNumber(int num);
        bool CheckString(string s);
        int CommonFactors(int a, int b);
        double[] ConvertTemperature(double celsius);
        int CountAsterisks(string s);
        int CountConsistentStrings(string[] words, string allowed);
        int CountDigits(int num);
        int CountEven(int num);
        int CountGoodTriplets(int[] arr, int a, int b, int c);
        int CountKDifference(int[] nums, int k);
        int CountMatches(IList<IList<string>> items, string ruleKey, string ruleValue);
        int CountOperations(int num1, int num2);
        int CountPairs(int[] nums, int k);
        int CountQuadruplets(int[] nums);
        int CountSegments(string s);
        int CountSegments1(string s);
        int CountWords(string[] words1, string[] words2);
        int[] Decode(int[] encoded, int first);
        string DecodeMessage(string key, string message);
        int[] DecompressRLElist(int[] nums);
        string DefangIPaddr(string address);
        string DestCity(IList<IList<string>> paths);
        bool DetectCapitalUse(string word);
        int DifferenceOfSum(int[] nums);
        int DistinctIntegers(int n);
        int FinalValueAfterOperations(string[] operations);
        int[] FindArray(int[] pref);
        int FindLucky(int[] arr);
        int FindMaxConsecutiveOnes_1(int[] nums);
        string[] FindOcurrences(string text, string first, string second);
        int FindPoisonedDuration(int[] timeSeries, int duration);
        string FirstPalindrome(string[] words);
        int FirstUniqChar(string s);
        IList<string> FizzBuzz(int n);
        string FreqAlphabets(string s);
        string GenerateTheString(int n);
        int[] GetConcatenation(int[] nums);
        int GetLucky(string s, int k);
        bool HalvesAreAlike(string s, char[] vowels);
        string Interpret(string command);
        int[] Intersection(int[] nums1, int[] nums2);
        int[] Intersection_2(int[] nums1, int[] nums2);
        bool IsAnagram(string word1, string word2);
        bool IsHappy(int n);
        bool IsPalindrome(string s);
        bool IsPalindrome(int x);
        bool IsStrictlyPalindromic(int n);
        bool IsUgly(int n);
        bool IsValid(string s);
        bool JudgeCircle(string moves);
        IList<bool> KidsWithCandies(int[] candies, int extraCandies);
        bool KLengthApart(int[] nums, int k);
        int LargestAltitude(int[] gain);
        int[] LeftRigthDifference(int[] nums);
        int LongestOnes(int[] nums, int k);
        int MajorityElement(int[] nums);
        int MaxDepth(string s);
        int Maximum69Number(int num);
        int MaximumCount(int[] nums);
        int MaximumValue(string[] strs);
        int MaxProduct(int[] nums);
        int MaxProductDifference(int[] nums);
        int MaxVowels(string s, int k);
        int MinimumSum(int num);
        int MinMaxGame(int[] nums);
        int MinMovesToSeat(int[] seats, int[] students);
        int MinPartitions(string n);
        int MostFrequentEven(int[] nums);
        int MostWordsFound(string[] sentences);
        int NumberOfMatches(int n);
        int NumberOfSteps(int num);
        int NumIdenticalPairs(int[] nums);
        int NumJewelsInStones(string jewels, string stones);
        int NumOfStrings(string[] patterns, string word);
        int NumOfStringsBasic(string[] patterns, string word);
        int PercentageLetter(string s, char letter);
        int PrefixCount(string[] words, string pref);
        int PrefixCount0(string[] words, string pref);
        IList<string> RemoveAnagrams(string[] words);
        IList<string> RemoveAnagrams2(string[] words);
        IList<string> RemoveAnagrams3(string[] words);
        string RemoveOuterParentheses(string s);
        char RepeatedCharacter(string s);
        string ReplaceDigits(string s);
        string RestoreString(string s, int[] indices);
        string ReversePrefix(string word, char ch);
        string ReverseStr(string s, int k);
        void ReverseString(char[] s);
        void ReverseString3(char[] s);
        string ReverseWords(string s);
        int[] RunningSum(int[] nums);
        int SecondHighest(string s);
        IList<int> SelfDividingNumbers(int left, int right);
        int[] SeparateDigits(int[] nums);
        int[] Shuffle(int[] nums, int n);
        int[] Shuffle1(int[] nums, int n);
        int[] SmallerNumbersThanCurrent(int[] nums);
        int SmallestEvenMultiple(int n);
        int[] SortArrayByParityII(int[] nums);
        int[] SortArrayByParityII2(int[] nums);
        int[] SortedSquares(int[] nums);
        int[] SortedSquares2(int[] nums);
        int[] SortedSquares3(int[] nums);
        string SortSentence(string s);
        int[][] SortTheStudents(int[][] score, int k);
        int[][] SortTheStudents2(int[][] score, int k);
        int[][] SortTheStudents3(int[][] score, int k);
        bool SquareIsWhite(string coordinates);
        int SubtractProductAndSum(int n);
        int SumOfUnique(int[] nums);
        int[] SumZero(int n);
        int TitleToNumber(string columnTitle);
        string ToGoatLatin(string sentence, char[] wovewlsUpperCase);
        string ToLowerCase(string s);
        string ToLowerCase1(string s);
        string TruncateSentence(string s, int k);
        int[] TwoSum(int[] nums, int target);
        int[] TwoSumBruteForce(int[] nums, int target);
        bool UniqueOccurrences(int[] arr);
        bool UniqueOccurrences_Linq(int[] arr);
        bool UniqueOccurrences_Linq2(int[] arr);
        int XorOperation(int n, int start);
    }
}